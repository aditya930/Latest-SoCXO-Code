{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"se",
				"setBody"
			],
			[
				"Test",
				"TestCallouts"
			],
			[
				"is",
				"isRunningTest"
			],
			[
				"re",
				"response1"
			],
			[
				"soc",
				"socxoApiHandler"
			],
			[
				"sty",
				"style	Tag"
			],
			[
				"Http",
				"HttpResponse"
			],
			[
				"auth",
				"authController"
			],
			[
				"aur",
				"authController"
			],
			[
				"cl",
				"class"
			],
			[
				"test",
				"testSocxoToken"
			],
			[
				"sele",
				"selectall"
			],
			[
				"check",
				"checkCount"
			],
			[
				"style",
				"styleClass"
			],
			[
				"rnage",
				"rangeFrom"
			],
			[
				"dta",
				"dateFilterQuery"
			],
			[
				"L",
				"LineItemWrapper"
			],
			[
				"tra",
				"trackingNumber"
			],
			[
				"Sh",
				"ShipmentSearchController"
			],
			[
				"in",
				"INSERT"
			],
			[
				"sle",
				"selectAllCheckbox"
			],
			[
				"che",
				"checkCount"
			],
			[
				"chec",
				"checkedArr"
			],
			[
				"s",
				"selectall"
			],
			[
				"Excep",
				"NullPointerException	[Standard Apex Class]"
			],
			[
				"err",
				"error_description"
			],
			[
				"logi",
				"loginError"
			],
			[
				"a",
				"alert"
			],
			[
				"ta",
				"target	Attr"
			],
			[
				"h",
				"href	Attr"
			],
			[
				"t",
				"target	Attr"
			],
			[
				"onc",
				"onclick	Attr"
			],
			[
				"ap",
				"apex"
			],
			[
				"rese",
				"resetButton"
			],
			[
				"di",
				"div	Tag"
			],
			[
				"class",
				"classname"
			],
			[
				"li",
				"line-height"
			],
			[
				"fon",
				"font-family"
			],
			[
				"bor",
				"border-radius"
			],
			[
				"back",
				"background-color"
			],
			[
				"video",
				"videoplayer"
			],
			[
				"ppt",
				"pptVideoUrlMap"
			],
			[
				"slide",
				"slideArray"
			],
			[
				"curr",
				"currentSlide1"
			],
			[
				"on",
				"onclick	Attr"
			],
			[
				"fun",
				"function"
			],
			[
				"showpo",
				"showPopup1"
			],
			[
				"link",
				"linkedinStatus"
			],
			[
				"linke",
				"linkedinMessage"
			],
			[
				"lin",
				"linkedinStatus"
			],
			[
				"line",
				"linkedinMessage"
			],
			[
				"JSON",
				"JSONParser"
			],
			[
				"Htt",
				"HttpResponse"
			],
			[
				"set",
				"setMethod"
			],
			[
				"b",
				"blurbids"
			],
			[
				"Acces",
				"Access_Token__c"
			],
			[
				"category",
				"categoryendpoint"
			],
			[
				"user",
				"userinfo"
			],
			[
				"SO",
				"SOCXO_Service__r"
			],
			[
				"SCO",
				"getStatusCode"
			],
			[
				"So",
				"SOCXO_token__c"
			],
			[
				"toke",
				"tokensecret"
			],
			[
				"str",
				"string"
			],
			[
				"twitter",
				"twittermap"
			],
			[
				"twittertoken",
				"twittertokensecret"
			],
			[
				"twitte",
				"twittertokensecret"
			],
			[
				"twittercon",
				"twitterconnect"
			],
			[
				"HTT",
				"HttpResponse"
			],
			[
				"auh",
				"authCodeUrl"
			],
			[
				"res",
				"response"
			],
			[
				"verifier",
				"verifier_body"
			],
			[
				"Tw",
				"TwitterDetails"
			],
			[
				"twitt",
				"twitterstatus"
			],
			[
				"tw",
				"twitteraccesstoken"
			],
			[
				"Acc",
				"Access_Token__c"
			],
			[
				"par",
				"par1"
			],
			[
				"twit",
				"twitterbody"
			],
			[
				"xfb",
				"xfb1"
			],
			[
				"call",
				"callbackurl1"
			],
			[
				"uti",
				"utilityclass"
			],
			[
				"ut",
				"utilityclass"
			],
			[
				"pageR",
				"PageReference"
			],
			[
				"pagere",
				"pagereference"
			],
			[
				"twi",
				"twitter_token"
			],
			[
				"JOSN",
				"JSON"
			],
			[
				"header",
				"headerValue"
			],
			[
				"Ht",
				"HttpRequest"
			],
			[
				"page",
				"pageSize"
			],
			[
				"pu",
				"public"
			],
			[
				"con",
				"Contact"
			],
			[
				"lst",
				"lstLead"
			],
			[
				"new",
				"newLead"
			],
			[
				"testQ",
				"testQuoteLineItem"
			],
			[
				"testCon",
				"testContactRole"
			],
			[
				"Con",
				"ContactId"
			],
			[
				"Prod",
				"Product2id"
			],
			[
				"de",
				"debug"
			],
			[
				"pa",
				"pageRef2"
			],
			[
				"testQuote",
				"testQuoteNew"
			],
			[
				"testq",
				"testQuoteNew1"
			],
			[
				"testQu",
				"testQuoteNew1"
			],
			[
				"tes",
				"testOpportunity"
			],
			[
				"A",
				"AccountID"
			],
			[
				"Opp",
				"Opportunity"
			],
			[
				"O",
				"Opportunity"
			],
			[
				"Account",
				"AccountID"
			],
			[
				"S",
				"SELECT"
			],
			[
				"Oppo",
				"OpportunityID"
			],
			[
				"Op",
				"OppID"
			],
			[
				"IS",
				"IsPrimary"
			],
			[
				"testPr",
				"testPriceBook2"
			],
			[
				"I",
				"IsPrimary"
			],
			[
				"testCont",
				"testContactRole"
			],
			[
				"testAccou",
				"testAccount"
			],
			[
				"tets",
				"testQuote"
			],
			[
				"opp",
				"opportunityRef"
			],
			[
				"Opo",
				"OpportunityID"
			],
			[
				"Ema",
				"Email__c"
			],
			[
				"Las",
				"Last_Name__c"
			],
			[
				"F",
				"First_Name__c"
			],
			[
				"pr",
				"prospectID"
			],
			[
				"App",
				"Application"
			],
			[
				"J",
				"Job_Application__c"
			],
			[
				"Rout",
				"Route_Outlet__c"
			],
			[
				"ls",
				"lstRouteOutlet"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "public with sharing class socxoApiHandler {\n\n\nPublic string getmetoken(string s,string url)\n {\n  \n Http ht = new Http();\n    HttpRequest req = new HttpRequest();\n    HttpResponse res =new HttpResponse();\n    req.setHeader('content-type','text/plain');\n    req.setMethod('POST');\n    req.setBody(s);\n    req.setEndpoint(url);\n    system.debug('Request1'+req);\n    system.debug('Token reponse is######'+s);\n    try {\n           res = ht.send(req);\n           string postbody=res.getBody();\n           system.debug('PPPPPPP'+postbody);\n     } catch(Exception e) {\n            System.debug('Callout error: '+ e);\n            System.debug(res.toString());\n        }\n    return res.getBody();\n }\n\npublic string getmerelatedblurbs (Id recid, string category) {\n\n    List<SOCXO_token__c> currenttoken1 = [select Access_Token__c,expireson__c,tenanentendpoint__c from SOCXO_token__c where Id =:recid];\n\n    \n    string categoryendpoint ='http://testenv.socxo.com/api/2.0/company/'+Integer.valueof(category)+'/blurbs';\n   \n    Http h = new Http();\n    HttpRequest req = new HttpRequest();\n    req.setHeader('content-type','application/json');\n   // req.setHeader('content-type','message/rfc822');\n    req.setHeader('Accept','application/json');\n    req.setHeader('Authorization', 'Bearer ' +currenttoken1[0].Access_Token__c);\n    req.setMethod('GET');\n    req.setEndpoint(categoryendpoint); \n    System.debug('Sending request...');\n    HttpResponse res = h.send(req);\n    string body2 = res.getBody();\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');        \n    system.debug('Related Blurbs Response::'+body2);\n    return body2;\n    }\n\n\n    public string getAllBlurbs(Id recId){\n      List<SOCXO_token__c> currenttoken1 = [select Access_Token__c,expireson__c,tenanentendpoint__c from SOCXO_token__c where Id =:recid];\n      string categoryendpoint = 'http://testenv.socxo.com/api/2.0/company/blurbs';\n      Http h = new Http();\n    HttpRequest req = new HttpRequest();\n    HttpResponse res = new HttpResponse();\n    req.setHeader('content-type','application/json');\n   // req.setHeader('content-type','message/rfc822');\n    req.setHeader('Accept','application/json');\n    req.setHeader('Authorization', 'Bearer ' +currenttoken1[0].Access_Token__c);\n    req.setMethod('GET');\n    req.setEndpoint(categoryendpoint); \n    System.debug('Sending request...');\n    if(Test.isRunningTest()){\n        res = TestCallouts.getAllBlurbs();\n    }\n    else{\n    res = h.send(req);\n    }\n    string body2 = res.getBody();\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');        \n    system.debug('All Blurbs Response::'+body2);\n    return body2;\n    }\n  \n  //method to gather user information necessary to connect with facebook.\n  \n  public string togetuserinformation() {\n  \n     List<SOCXO_token__c> currenttoken1 = [select Access_Token__c,expireson__c,tenanentendpoint__c from SOCXO_token__c where  SOCXO_Service__r.SFuser__r.Id =:userinfo.getuserid()];\n\n    string categoryendpoint = 'http://testenv.socxo.com/api/2.0/user/profile';\n    Http h = new Http();\n    HttpRequest req = new HttpRequest();\n    req.setHeader('content-type','application/json');\n    req.setHeader('content-type','message/rfc822');\n    req.setHeader('Accept','application/json');\n    req.setHeader('Authorization', 'Bearer ' +currenttoken1[0].Access_Token__c);\n    req.setMethod('GET');\n    req.setEndpoint(categoryendpoint); \n    System.debug('Sending request...');\n    HttpResponse res = h.send(req);\n    string body2 = res.getBody();\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');        \n    system.debug('User Information Response::'+body2);\n    return body2;\n    }  \n    \n   //Method to post in facebook.\n   \n   public string facebookpost(string userBlurbId, string title, string description,string comment) {\n   \n   String s;\n        /*s='BlurbId='+par1;\n        s+='&EnterpriseBlurbId=';\n        s+=par2; */\n         \n       // s= '{\"UserBlurbId\":\"'+userBlurbId+'\",\"Title\":\"'+title+'\",\"Description\":\"'+description+'\",\"Comment\":\"'+comment+'\"}';\n        \n        s = '{\\\"UserBlurbId\\\":';\n        s+='\\\"'+userBlurbId+'\\\"';\n        \n        if(title!=NULL){\n        s+=',\\\"Title\\\":';\n        s+='\\\"'+title+'\\\"';\n        }\n        \n        if(description!=NULL){\n        s+=',\\\"Description\\\":';\n        s+='\\\"'+description+'\\\"';\n        }\n        \n        if(comment!=NULL){\n        s+=',\\\"Comment\\\":';\n        s+='\\\"'+comment+'\\\"';\n        }\n        \n        s+='}';\n    \n   \n   system.debug('SSSSSSSS'+s);\n    List<SOCXO_token__c> currenttoken1 = [select Access_Token__c,expireson__c,tenanentendpoint__c from SOCXO_token__c where  SOCXO_Service__r.SFuser__r.Id =:userinfo.getuserid()];\n\n    string categoryendpoint = 'http://testenv.socxo.com/api/2.0/socialmedia/facebook/post';\n    Http h = new Http();\n    HttpRequest req = new HttpRequest();\n    system.debug('Accesstoken::::' + currenttoken1[0].Access_Token__c);\n    req.setHeader('content-type','application/json');\n    //req.setHeader('content-type','message/rfc822');\n    req.setHeader('Accept','application/json');\n    req.setHeader('Authorization', 'Bearer ' +currenttoken1[0].Access_Token__c);\n    req.setMethod('POST');\n    req.setBody(s);\n    req.setEndpoint(categoryendpoint); \n    System.debug('Sending request...');\n    HttpResponse res = h.send(req);\n    string body2 = res.getBody();\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');        \n    system.debug('facebookpost response::'+body2);\n    return body2;\n   \n   \n   }\n\n   //Method to post in twitter\n\n   public string twitterpost(string userBlurbId, string title) {\n    \n    String s;\n      /*blurbids='BlurbId='+par1;\n      blurbids+='&EnterpriseBlurbId='+par2;*/\n\n     // blurbids = '{\"UserBlurbId\":\"'+userBlurbId+'\",\"Title\":\"'+title+'\"}';\n\n        s = '{\\\"UserBlurbId\\\":';\n        s+='\\\"'+userBlurbId+'\\\"';\n        \n        if(title!=NULL){\n        s+=',\\\"Title\\\":';\n        s+='\\\"'+title+'\\\"';\n        }\n        \n        s+= '}';\n    System.debug('BlurbidsTwitter'+s);\n\n    List <SOCXO_token__c> currenttoken1 = [SELECT Access_Token__c,expireson__c,tenanentendpoint__c from SOCXO_token__c where  SOCXO_Service__r.SFuser__r.Id =:userinfo.getuserid()];\n\n    string categoryendpoint = 'http://testenv.socxo.com/api/2.0/socialmedia/twitter/post';\n    Http h = new Http();\n    HttpRequest req = new HttpRequest();\n    req.setHeader('Accept','application/json');\n    req.setHeader('content-type', 'application/json');\n    req.setHeader('Authorization','Bearer '+currenttoken1[0].Access_Token__c);\n    req.setMethod('POST');\n    req.setBody(s);\n    req.setEndpoint(categoryendpoint); \n    System.debug('Sending request...');\n    HttpResponse res = h.send(req);\n    string body2 = res.getBody();\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');        \n    system.debug('body22222'+body2);\n    return body2;\n\n   }\n\n   public string linkedinPost(string userBlurbId, string title, string description,string comment) {\n    String s;\n    /*blurbids = 'BlurbId='+par1;\n    blurbids+='&EnterpriseBlurbId='+par2;*/\n\n   // blurbids = '{\"UserBlurbId\":\"'+userBlurbId+'\",\"Title\":\"'+title+'\",\"Description\":\"'+description+'\",\"Comment\":\"'+comment+'\"}';\n   \n        s = '{\\\"UserBlurbId\\\":';\n        s+='\\\"'+userBlurbId+'\\\"';\n        \n        if(title!=NULL){\n        s+=',\\\"Title\\\":';\n        s+='\\\"'+title+'\\\"';\n        }\n        \n        if(description!=NULL){\n        s+=',\\\"Description\\\":';\n        s+='\\\"'+description+'\\\"';\n        }\n        \n        if(comment!=NULL){\n        s+=',\\\"Comment\\\":';\n        s+='\\\"'+comment+'\\\"';\n        }\n        \n        s+='}';\n\n    List <SOCXO_token__c> currenttoken1 = [SELECT Access_Token__c,\n                                                  expireson__c \n                                                  FROM SOCXO_token__c \n                                                  WHERE SOCXO_Service__r.SFuser__r.ID =:userinfo.getuserid()];\n\n    string categoryendpoint = 'http://testenv.socxo.com/api/2.0/socialmedia/linkedin/post';\n    Http h = new Http();\n    HttpRequest req = new HttpRequest();\n\n    req.setEndpoint(categoryendpoint);\n    req.setHeader('Accept','application/json');\n    req.setHeader('content-type', 'application/json');\n    req.setHeader('Authorization','Bearer '+currenttoken1[0].Access_Token__c);\n    req.setMethod('POST');\n    req.setBody(s);\n    System.debug('Sending request(linkedin)....');\n    HttpResponse res = h.send(req);\n    string body2 = res.getBody();\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');        \n    system.debug('body22222'+body2);\n\n    return body2;\n    \n   }\n\n   \n   \n\n   //Method to get token from facebook if the user is not logged in.\n   \n   public string getmefacebooktoken(string code,string call) {\n   \n   socxoAppsettings__c sett= socxoAppsettings__c.getValues('socxoAppsettings');\n   String s;\n        s='https://graph.facebook.com/oauth/access_token?';\n        //s+='client_id=755760694472509';\n        s+='client_id='+sett.FbAppkey__c;\n        \n        s+='&redirect_uri=';\n        s+=call;\n        s+='&code=';\n        s+=code;\n        s+='&client_secret=';\n        s+=sett.FbAppSecret__c;\n        \n   \n   system.debug('SSSSSSSS'+s);\n\n    Http h = new Http();\n    HttpRequest req = new HttpRequest();\n    //req.setHeader('content-type','application/json');\n    //req.setHeader('content-type','message/rfc822');\n    req.setHeader('Accept','application/json');\n    //req.setHeader('Authorization', 'Bearer ' +currenttoken1[0].Access_Token__c);\n    req.setMethod('GET');\n    //req.setBody(s);\n    req.setEndpoint(s); \n    System.debug('Sending request...');\n    HttpResponse res = h.send(req);\n    string body2 = res.getBody();\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');        \n    system.debug('Facebook Token response'+body2);\n    return body2;\n   \n   }\n\n    public String fetchLinkedinToken(string code,string redirectPage){\n        String getToken;\n         socxoAppsettings__c sett= socxoAppsettings__c.getValues('socxoAppsettings'); \n        getToken = 'https://www.linkedin.com/uas/oauth2/accessToken?';\n        getToken+='grant_type=authorization_code';\n        getToken+='&code='+code;\n        getToken+='&redirect_uri='+redirectPage;\n        getToken+='&client_id='+ sett.LinkedInAppKey__c;\n        getToken+='&client_secret='+ sett.LinkedInAppSecret__c;\n        \n        Http h = new Http();\n        HttpRequest req = new HttpRequest();\n        req.setEndpoint(getToken);\n        req.setMethod('POST');\n        req.setHeader('Content-Type','application/json');\n        \n        HttpResponse res = h.send(req);\n        string body = res.getBody();\n        System.debug('linkedinbody('+res.getStatusCode()+''+ res.getStatus()+')');\n        System.debug('linkedinbody:::'+body);\n        return body;\n        \n    }\n   \n\n   /*public string getmetwittertoken(string code, string call) {\n\n   }\n*/\n   \n   public string getmybody(string accesstoken)\n   \n   {\n   \n   //string s = 'https://graph.facebook.com/me';\n   //string s = 'https://graph.facebook.com/v1.0/100006293131598?username';\n   string s = 'https://graph.facebook.com/v1.0/me?fields=id,name,picture';\n   Http h = new Http();\n   HttpRequest req = new HttpRequest();\n   req.setHeader('content-type','application/json');\n   req.setHeader('Accept','application/json');\n   req.setHeader('Authorization', 'Bearer ' +accesstoken);\n   req.setMethod('GET');\n    //req.setBody(s);\n   req.setEndpoint(s); \n   System.debug('Sending request...');\n   HttpResponse res = h.send(req);\n   string body2 = res.getBody();\n   System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');        \n   system.debug('mybody'+body2);\n   return body2;\n   \n   }\n\n   public string getLinkedinbody(string accesstoken)        \n    {\n        System.debug('linked accesstoken ' + accesstoken);\n        String endpoint = 'https://api.linkedin.com/v1/people/~:(id,email-address)?format=json&oauth2_access_token=' + accesstoken;\n        Http h = new Http();\n        HttpRequest req = new HttpRequest();\n        req.setHeader('content-type','application/json');\n        req.setHeader('Accept','application/json');\n        //req.setHeader('Authorization', 'Bearer ' +accesstoken);\n        req.setMethod('GET');\n        //req.setBody(s);\n        req.setEndpoint(endpoint); \n        System.debug('Sending request...');\n        HttpResponse res = h.send(req);\n        string body2 = res.getBody();\n        System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');        \n        system.debug('mybody'+body2);\n        return body2;        \n    }\n   \n \n    public string fbconnect(string id, string accesstoken, string name, string secret)\n    {\n    \n       List<SOCXO_token__c> currenttoken1 = [select Access_Token__c,expireson__c,tenanentendpoint__c from SOCXO_token__c where  SOCXO_Service__r.SFuser__r.Id =:userinfo.getuserid()];\n\n       string connectendpoint = 'http://testenv.socxo.com/api/2.0/socialmedia/facebook/connect';\n       String s;\n\n        s='{\\\"ProviderUserId\\\":';\n        s+='\\\"'+id+'\\\"';\n\n        s+=',\\\"AccessToken\\\":';\n        s+='\\\"'+accesstoken+'\\\"';\n\n        s+=',\\\"ProviderUserName\\\":';\n        s+='\\\"'+name+'\\\"';\n\n        s+=',\\\"TokenSecret\\\":';\n        s+='\\\"'+secret+'\\\"';\n        s+='};';\n\n    system.debug('sssssss'+s);    \n    Http h = new Http();\n    HttpRequest req = new HttpRequest();\n    req.setHeader('content-type','application/json');\n    //req.setHeader('content-type','message/rfc822');\n    req.setHeader('Accept','application/json');\n    req.setHeader('Authorization', 'Bearer ' +currenttoken1[0].Access_Token__c);\n    req.setMethod('POST');\n    req.setBody(s);\n    req.setEndpoint(connectendpoint); \n    System.debug('Sending request...');\n    HttpResponse res = h.send(req);\n    string body2 = res.getBody();\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');        \n    system.debug('body22222'+body2);\n    return body2;\n        \n        \n        \n           \n   }\n\n   public string twitterconnect(string accesstoken, string id, string tokensecret){\n\n    List<SOCXO_token__c> currenttoken1 = [select Access_Token__c,expireson__c,tenanentendpoint__c from SOCXO_token__c where  SOCXO_Service__r.SFuser__r.Id =:userinfo.getuserid()];\n\n       /*TwitterDetails tdetails = new TwitterDetails();\n       Map <String,String> twittermap = new Map <String,String>();*/\n       string connectendpoint = 'http://testenv.socxo.com/api/2.0/socialmedia/twitter/connect';\n       String s;\n\n        s='{\\\"AccessToken\\\":';\n        s+='\\\"'+accesstoken+'\\\"';\n\n        /*s+=',\\\"AvatharImageUrl\\\":';\n        s+='\\\"'+url+'\\\"';\n\n        s+=',\\\"ProviderUserName\\\":';\n        s+='\\\"'+name+'\\\"';*/\n\n        s+=',\\\"ProviderUserId\\\":';\n        s+='\\\"'+id+'\\\"';\n\n        s+=',\\\"TokenSecret\\\":'; \n        s+='\\\"'+tokensecret+'\\\"';\n        s+='};';\n\n        /*twittermap = tdetails.getUrlParams(s);\n        s = (string)twittermap;*/\n\n        system.debug('bodytwitter###'+s);\n        Http h = new Http();\n    HttpRequest req = new HttpRequest();\n    req.setHeader('content-type','application/json');\n    //req.setHeader('content-type','message/rfc822');\n    req.setHeader('Accept','application/json');\n    req.setHeader('Authorization', 'Bearer ' +currenttoken1[0].Access_Token__c);\n    req.setMethod('POST');\n    req.setBody(s);\n    req.setEndpoint(connectendpoint); \n    System.debug('Sending request...');\n    HttpResponse res = h.send(req);\n    string body2 = res.getBody();\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');        \n    system.debug('body22222'+body2);\n    return body2;\n   }\n\n   public string linkedinConnect(string id, string accesstoken, string secret)\n    {    \n        List<SOCXO_token__c> currenttoken1 = [select Access_Token__c,expireson__c,tenanentendpoint__c from SOCXO_token__c where  SOCXO_Service__r.SFuser__r.Id =:userinfo.getuserid()];\n        \n        string connectendpoint = 'http://testenv.socxo.com/api/2.0/socialmedia/linkedin/connect';\n        String s;\n        \n        s='{\\\"ProviderUserId\\\":';\n        s+='\\\"'+id+'\\\"';\n        \n        s+=',\\\"AccessToken\\\":';\n        s+='\\\"'+accesstoken+'\\\"';\n        \n        /*s+=',\\\"ProviderUserName\\\":';\n        s+='\\\"'+name+'\\\"';*/\n        \n        s+=',\\\"TokenSecret\\\":';\n        s+='\\\"'+secret+'\\\"';\n        s+='};';\n        \n        Http h = new Http();\n        HttpRequest req = new HttpRequest();\n        req.setHeader('content-type','application/json');    \n        req.setHeader('Accept','application/json');\n        req.setHeader('Authorization', 'Bearer ' +currenttoken1[0].Access_Token__c);\n        req.setMethod('POST');\n        req.setBody(s);\n        req.setEndpoint(connectendpoint); \n        \n        HttpResponse res = h.send(req);\n        string body = res.getBody();\n        System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');            \n        return body;   \n    }\n\n\n   //Method to fetch Linkedin access Token\n   \n//This function will send email ids to SoCXO for sending invites\n  public string sendInvite (string emailList) {\n\n    List<SOCXO_token__c> currenttoken1 = [select Access_Token__c,expireson__c,tenanentendpoint__c from SOCXO_token__c ];\n\n    string categoryendpoint = 'http://testenv.socxo.com/api/2.0/invitation/externalinvite';\n    Http h = new Http();\n    HttpRequest req = new HttpRequest();\n    req.setHeader('content-type','application/json');\n   // req.setHeader('content-type','message/rfc822');\n    req.setHeader('Accept','application/json');\n    req.setHeader('Authorization', 'Bearer ' +currenttoken1[0].Access_Token__c);\n    req.setMethod('GET');\n    req.setEndpoint(categoryendpoint);\n    wrapper wra = new wrapper();\n    wra.InvitationUrl ='https://c.ap2.visual.force.com/apex/RegisterSocxo';\n    wra.CSVEmails=emailList;\n   // string bdy = JSON.Stringify(wra);\n   // system.debug('bdy '+bdy);\n    string bdy ='{ \"InvitationUrl\": \"https://c.ap2.visual.force.com/apex/RegisterSocxo\", \"CSVEmails\": \"'+emailList+'\"}';  \n    req.setBody(bdy);\n    System.debug('Sending request...');\n    HttpResponse res = h.send(req);\n    string body2 = res.getBody();\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');\n    system.debug('body22222'+body2);\n    return body2;\n    }\n   public class wrapper{\n   public string InvitationUrl{get; set;}\n   public string CSVEmails{get; set;}\n\n   }\n   \n   // User registration of already invited users\n    public string userRegister(string email, string pwd, string fullname, string firstname) {\n      List<SOCXO_token__c> currenttoken1 = [select Access_Token__c,expireson__c,tenanentendpoint__c from SOCXO_token__c ];\n\n    string categoryendpoint = 'http://testenv.socxo.com/api/2.0/account/register';\n    Http h = new Http();\n    HttpRequest req = new HttpRequest();\n    req.setHeader('content-type','application/json');\n    //req.setHeader('content-type','message/rfc822');\n    req.setHeader('Accept','application/json');\n    req.setHeader('Authorization', 'Bearer ' +currenttoken1[0].Access_Token__c);\n    req.setMethod('POST');\n    req.setEndpoint(categoryendpoint); \n    string body = '{  \"UserName\":\"'+email+'\", \"Password\":\"'+pwd+'\",\"FullName\":\"'+fullname+'\", \"FirstName\":\"'+firstname+'\", \"LocalTime\":null }';\n    req.setBody(body);\n    req.setTimeout(6000); \n    System.debug('Sending request...');\n    HttpResponse res = h.send(req);\n    string body2 = res.getBody();\n    registrationwrapper wra = new registrationwrapper();\n    wra = (registrationwrapper)Json.deserialize(res.getBody(),registrationwrapper.class);\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');\n    system.debug('body22222'+body2);\n    return String.valueof(wra.status);\n\n\n    }\n\n\n public string getAppsettings() {\n      List<SOCXO_token__c> currenttoken1 = [select Access_Token__c,expireson__c,tenanentendpoint__c from SOCXO_token__c ];\n      List<socxoAppsettings__c > sett= socxoAppsettings__c.getall().values();  \n       if(sett.size()==0)\n    {\n      \n    string categoryendpoint = 'http://testenv.socxo.com/api/2.0/tenant/appsettings';\n    Http h = new Http();\n    HttpRequest req = new HttpRequest();\n    req.setHeader('content-type','application/json');\n    //req.setHeader('content-type','message/rfc822');\n    req.setHeader('Accept','application/json');\n    req.setHeader('Authorization', 'Bearer ' +currenttoken1[0].Access_Token__c);\n    req.setMethod('GET');\n    req.setEndpoint(categoryendpoint); \n    \n    //req.setBody(body);\n    req.setTimeout(6000); \n    System.debug('Sending request...');\n    HttpResponse res = h.send(req);\n    string body2 = res.getBody();\n    socxoAppSettings wra = new socxoAppSettings();\n    wra = (socxoAppSettings)Json.deserialize(res.getBody(),socxoAppSettings.class);\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');\n    system.debug('wra.AppKeys  '+wra.AppKeys );\n    System.Debug('wra.Status:'+wra.Status);\n    if(wra.Status=='1000')\n    {\n   \n       \n        socxoAppsettings__c settings= new socxoAppsettings__c ();\n        settings.Name='socxoAppsettings';\n        settings.FbAppkey__c=wra.AppKeys.FbAppkey;\n        settings.FbAppSecret__c=wra.AppKeys.FbAppSecret;\n        settings.TwitterAppkey__c=wra.AppKeys.TwitterAppkey;\n        settings.TwitterAppSecret__c=wra.AppKeys.TwitterAppSecret;\n        settings.LinkedInAppKey__c =wra.AppKeys.LinkedInAppKey;\n        settings.LinkedInAppSecret__c =wra.AppKeys.LinkedInAppSecret;\n        System.Debug('settings:'+settings);\n        insert settings;\n         return String.valueof(wra.Status);\n    }\n     return String.valueof(wra.Status);\n    }\n    else\n    {\n        return 'already have the keys';\n    \n    }\n\n    }\n    \n    \n   //<!--Schedule Post-->\n   \n    public string SchedulePost(string userBlurbId, string title, string description,string comment,string social) {\n    String s;\n    /*blurbids = 'BlurbId='+par1;\n    blurbids+='&EnterpriseBlurbId='+par2;*/\n\n   // blurbids = '{\"UserBlurbId\":\"'+userBlurbId+'\",\"Title\":\"'+title+'\",\"Description\":\"'+description+'\",\"Comment\":\"'+comment+'\"}';\n   \n        s = '{\\\"UserBlurbId\\\":';\n        s+='\\\"'+userBlurbId+'\\\"';\n        \n       /* s+=',\\\"ExpectedTime\\\":';\n        s+='\\\"2015-06-11T15:52:39.366\\\"'; */\n        \n        if(title!=NULL){\n        s+=',\\\"Title\\\":';\n        s+='\\\"'+title+'\\\"';\n        }\n        \n        if(description!=NULL){\n        s+=',\\\"Description\\\":';\n        s+='\\\"'+description+'\\\"';\n        }\n        \n        if(comment!=NULL){\n        s+=',\\\"Comment\\\":';\n        s+='\\\"'+comment+'\\\"';\n        }\n        \n        s+='}';\n\n    List <SOCXO_token__c> currenttoken1 = [SELECT Access_Token__c,\n                                                  expireson__c \n                                                  FROM SOCXO_token__c \n                                                  WHERE SOCXO_Service__r.SFuser__r.ID =:userinfo.getuserid()];\n\n    string categoryendpoint = 'http://testenv.socxo.com/api/2.0/socialmedia/'+social+'/schedule';\n    Http h = new Http();\n    HttpRequest req = new HttpRequest();\n    HttpResponse res = new HttpResponse();\n    req.setEndpoint(categoryendpoint);\n    req.setHeader('Accept','application/json');\n    req.setHeader('content-type', 'application/json');\n    req.setHeader('Authorization','Bearer '+currenttoken1[0].Access_Token__c);\n    req.setMethod('POST');\n    req.setBody(s);\n    System.debug('Sending request(linkedin)....');\n    if(Test.isRunningTest()){\n            res = TestCallouts.scheduletest();\n        }\n    else{\n        res = h.send(req);\n    }\n    string body2 = res.getBody();\n    System.debug('Received response ('+res.getStatusCode()+' '+res.getStatus()+')');        \n    system.debug('body22222'+body2);\n\n    return body2;\n    \n   } \n\npublic class registrationwrapper{\n\npublic string errorId {get;set;}\npublic string status {get;set;}\npublic string message{get;set;}\n\n}\npublic class socxoAppSettings{\n\npublic socxoAppkeys AppKeys {get;set;}\npublic string Status{get;set;}\npublic string Message{get;set;}\n\n}\npublic class socxoAppkeys{\npublic string FbAppkey{get;set;}\npublic string FbAppSecret{get;set;}\npublic string TwitterAppkey{get;set;}\npublic string TwitterAppSecret{get;set;}\npublic string LinkedInAppKey{get;set;}\npublic string LinkedInAppSecret{get;set;}\n\n}\n\n public class loginError {\n              public String error{get; set;}\n              public String error_description {get; set;}\n            }\n\n\n    //to get code\n   \n   public PageReference getmecode(string url)\n   {\n   return new PageReference(url);\n   }\n   \n    \n    \n    \n    \n    \n    }",
			"file": "src/classes/socxoApiHandler.cls",
			"file_size": 24725,
			"file_write_time": 130803246615181904,
			"settings":
			{
				"buffer_size": 24727,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "public with sharing class BlurbController {\n\n    private final List<mailer__c> linkforemail; \n    private final lead lead1;\n    String[] categories = new String[]{};\n    public boolean req {get;set;}\n    //public string x1 { get; set{x1=value;}}\n    public string x1 { get; set;} \n    public string xfb1 { get; set;}\n    public string xfb2 { get; set;}\n    public string xfb3 { get; set;}\n    public string blurbString {get; set;}\n    public boolean instantshare{get; set;}\n    \n    public wrapper1 blurbBody {get; set;}\n    public List <wrapper1> lstBlurbs {get; set;}\n    public wrapper1  editblurb {get;set;}\n    //Pop up\n    \n    public boolean displayPopup {get; set;}\n    public boolean displayPopup1 {get; set;}\n    \n    private static final String AUTH_URL = 'http://mobile.socxo.com/api/Account/login'; //Login URL\n\n    Map<String,string> categorymap1 = new map<String,string> (); \n    //list<string>categorylist1 = new list<string>(); \n    list<url__c>categorylist1 = new list<url__c>();\n    public String code { get; set; }\n    public String username { get; set; } \n    public map<string,string> categorymap{get{return categorymap1;}set;}\n    //public list<string> categorylist { get {return categorylist1;} set; }\n    public list<url__c> categorylist { get {return categorylist1;} set; }\n    public String password   { get; set; }\n    \n    public String postbody {get;set;}\n    public String userbody {get;set;}\n    public String facebookbody {get;set;}\n    public String fbaccesstoken {get;set;}\n    \n     public  string accsToken {get;set;}\n     public  string fbmessage {get;set;}\n     public  string fbstatus {get;set;}\n\n     public String twitterbody {get;set;}\n     public String twitteraccesstoken {get;set;}\n\n     public String twittermessage {get;set;}\n     public String twitterstatus {get;set;}\n\n     public String linkedinbody {get;set;}\n     public String linkedinMessage {get;set;}\n     public String linkedinStatus {get;set;}\n     \n     public String Schedulestatus {get;set;}\n     public String Scheduletime  {get;set;}\n     public String Schedulemessage {get;set;}\n     \n     public String schedulebody {get;set;}\n     \n     public String body2 { get; set; } \n   \n     public string tenenpoint  {get;set;}\n     \n     public string expiresin  {get;set;}\n     \n     public String body1 { get; set; } \n     \n     private category__c selcategory {get;set;}\n\n     public String blurbLink {get;set;}\n     public String blurbTitle {get;set;}\n     public String blurbDesc {get;set;}\n     public String blurbComment {get;set;}\n     public String blurbDetailId {get;set;}\n     public List <url__c> blurbDetails {get;set;}\n     public boolean showeditpanel{get;set;}\n     public boolean showselectedblurb{get;set;}\n     public wrapper1 blurbtopopup {get;set;}\n     public String bluridtoshow {get;set;}\n\n    /*  public string blurbTitle {get; set;}\n     public string blurbDesc {get; set;}\n     public string blurbComment {get; set;} */\n\n    public String[] getCategories() {\n        return categories;\n    }\n\n    public void setCategories(String[] categories) {\n        this.categories = categories;\n    }\n\n\n    //Constructor\n\n\n    public BlurbController() {\n        System.Debug('test1:' + ApexPages.currentPage().getParameters().get('CategoryId') + ' ' + ApexPages.currentPage().getParameters().get('BlurbId'));\n        showselectedblurb = true;\n\n\n        //blurbString = blurbs!!!!!;\n        showeditpanel = false;\n        string callbackUrl1 = EncodingUtil.urlEncode('https://' + ApexPages.currentPage().getHeaders().get('Host') + Page.paneltest.getUrl(), 'UTF-8');\n\n\n        linkforemail = [select id, link__c from mailer__c];\n        string code = ApexPages.currentPage().getParameters().get('code');\n        string state = ApexPages.currentPage().getParameters().get('state');\n        system.debug('code:::' + code);\n        //system.debug('hi');\n        //system.debug('')\n        //categorylist = new list<url__c>();\n\n       /* if (code != '' && state == 'facebook') {\n            socxoApiHandler util1 = new socxoApiHandler();\n            fbaccesstoken = util1.getmefacebooktoken(code, callbackurl1);\n            system.debug('fbtoken:::' + fbaccesstoken);\n\n        }*/\n\n\n        /*if(code!='' && state=='twitter') {\n    socxoApiHandler util1 = new socxoApiHandler();\n    twitteraccesstoken = util1.getmetwittertoken(code,callbackurl1);\n\n  }  \n  */\n\n\n    }\n\n    public List < mailer__c > getcategoryblurbs() {\n        //system.debug('WWWWW'+linkforemail[0].URLs__r);\n        return linkforemail;\n    }\n\n    public boolean getstatusofblurb() {\n        if (ApexPages.currentPage().getParameters().get('BlurbId') != null && ApexPages.currentPage().getParameters().get('CategoryId') != null) {\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n\n    \n\n    \n\n    public PageReference stopeditblurbtopost() {\n        for (wrapper1 m: lstBlurbs) {\n            if (m.BlurbId == xfb1) {\n                m.Editmode = false;\n            }\n        }\n        showeditpanel = false;\n        System.Debug('showeditpanel :' + showeditpanel);\n        return null;\n    }\n    public PageReference editblurbtopost() {\n        for (wrapper1 m: lstBlurbs) {\n            if (m.BlurbId == xfb1) {\n                m.Editmode = true;\n            }\n        }\n        showeditpanel = true;\n        System.Debug('showeditpanel :' + showeditpanel);\n        return null;\n    }\n\n\n\n\n    public PageReference Categories() {\n        showselectedblurb = false;\n        if (ApexPages.currentPage().getParameters().get('BlurbId') != '') {\n            showselectedblurb = true;\n        }\n        System.Debug('test:' + ApexPages.currentPage().getParameters().get('CategoryId') + ' ' + ApexPages.currentPage().getParameters().get('BlurbId'));\n\n        /*socxoApiHandler u = new socxoApiHandler();\n        userbody = u.togetuserinformation();\n        system.debug('USER:::' + userbody);*/\n\n        List < SOCXO_token__c > currenttoken1 = [select Access_Token__c, expireson__c, tenanentendpoint__c from SOCXO_token__c where SOCXO_Service__r.SFuser__r.Id = : userinfo.getuserid()];\n\n        string blurbendpoint = 'http://testenv.socxo.com/api/2.0/company/categories';\n        system.debug('Category blurb Endpoint::' + blurbendpoint);\n        Http h = new Http();\n        HttpRequest req = new HttpRequest();\n        HttpResponse res = new HttpResponse();\n        req.setHeader('content-type', 'application/json');\n        req.setHeader('content-type', 'message/rfc822');\n        req.setHeader('Accept', 'application/json');\n        req.setHeader('Authorization', 'Bearer ' + currenttoken1[0].Access_Token__c);\n        req.setMethod('GET');\n        req.setEndpoint(blurbendpoint);\n        req.setTimeout(50000);\n        System.debug('Sending request...');\n        system.debug('REQQQQ'+req);\n        if(!Test.isRunningTest()){\n           // \n            res = h.send(req);\n        }\n        else{\n            res = TestCallouts.Categories();\n        }\n        body1 = res.getBody();\n        System.debug('Received response (' + res.getStatusCode() + ' ' + res.getStatus() + ')');\n        system.debug('Category Response Body:::' + body1);\n        response m = (response) JSON.deserialize(body1, response.class);\n        system.debug('JSON########' + m);\n        system.debug('JSON1########' + m.Categories);\n        list < category__c > savecategory = new list < category__c > ();\n        for (wrapper w: m.Categories) {\n            categorymap1.put(w.CategoryId, w.Name);\n            category__c c = new category__c();\n            c.name = w.name;\n            c.categoryId__c = w.CategoryId;\n            savecategory.add(c);\n        }\n        list < category__c > deletecategory = [select id from category__c];\n\n        if (ApexPages.currentPage().getParameters().get('BlurbId') != null && ApexPages.currentPage().getParameters().get('CategoryId') != null) {\n            system.debug('entered');\n            // showselectedblurb = true;\n            x1 = ApexPages.currentPage().getParameters().get('CategoryId');\n            bluridtoshow = ApexPages.currentPage().getParameters().get('BlurbId');\n            // PageReference p = test1();\n            categorylist1.clear();\n            // String strX = ApexPages.currentPage().getParameters().get('x1');\n            ///system.debug('[[[[[[['+strX);\n            //system.debug(']]]]]]]'+x1);\n            //List<SOCXO_token__c> currenttoken1 = [select Id ,Access_Token__c,expireson__c,tenanentendpoint__c from SOCXO_token__c where  SOCXO_Service__r.SFuser__r.Id =:userinfo.getuserid()];        \n\n            //calling the utility class to make callout\n            socxoApiHandler util = new socxoApiHandler();\n            body2 = util.getmerelatedblurbs(currenttoken1[0].id, x1);\n\n            system.debug('Blurb Response::::' + body2);\n\n\n            //Using wrapper class\n            map < string, Id > allcategories = new map < string, Id > ();\n            for (category__c cat: [select id, categoryid__c from category__c]) {\n                allcategories.put(cat.categoryid__c, cat.id);\n            }\n\n            list < URL__c > saveurl = new list < URL__c > ();\n            list < mailer__c > mailerobj = new list < mailer__c > ();\n            response1 m1 = (response1) JSON.deserialize(body2, response1.class);\n            lstBlurbs = m1.blurbs;\n\n            for (wrapper1 w: m1.blurbs) {\n\n                if (showselectedblurb = true && w.BlurbID == bluridtoshow) {\n                    blurbtopopup = new wrapper1();\n                    blurbtopopup = w;\n                    system.debug('blurbtopopup :' + blurbtopopup);\n                }\n\n                /*url__c u = new url__c();\n      u.category__c = allcategories.get(w.CategoryId);\n      u.BlurbId__c = w.BlurbId;\n      u.Description__c = w.Description;\n      u.EnterpriseBlurbId__c = w.EnterpriseBlurbId;\n      u.links__c = w.Url;\n      u.ImageUrl__c = w.ImageUrl;\n      u.Title__c = w.Title;*/\n\n                // blurbBody.categoryId = allcategories.get(w.CategoryId);\n                /*blurbBody.BlurbId = w.BlurbId;\n      blurbBody.Description = w.Description;\n      blurbBody.EnterpriseBlurbId = w.EnterpriseBlurbId;\n      blurbBody.Url = w.Url;\n      blurbBody.ImageUrl = w.ImageUrl;\n      blurbBody.Title = w.Title;*/\n\n                // lstBlurbs.add(blurbBody);\n\n                // saveurl.add(u);\n                // categorylist1.add(u);\n\n\n\n\n                // system.debug('imageurlsssss##'+u.ImageUrl__c);\n\n                //categorylist.add(u);\n                mailer__c m2 = new mailer__c();\n                m2.link__c = w.url;\n                mailerobj.add(m2);\n            }\n            /* selcategory = [select id from category__c  where categoryId__c = : categories[0]];\n     delete selcategory.URLs__r;\n     insert saveurl;\n     list<mailer__c>formail = [select id from mailer__c];\n     delete formail;\n     insert mailerobj; */\n            system.debug('%%%%%%%%%%' + categorylist1);\n            system.debug('%%%%%%%%%%' + categorylist);\n\n        } else {\n\n            socxoApiHandler util = new socxoApiHandler();\n            body2 = util.getAllBlurbs(currenttoken1[0].id);\n\n            system.debug('Blurb Response::::' + body2);\n\n\n            //Using wrapper class\n            map < string, Id > allcategories = new map < string, Id > ();\n            for (category__c cat: [select id, categoryid__c from category__c]) {\n                allcategories.put(cat.categoryid__c, cat.id);\n            }\n\n            list < URL__c > saveurl = new list < URL__c > ();\n            list < mailer__c > mailerobj = new list < mailer__c > ();\n            response1 m1 = (response1) JSON.deserialize(body2, response1.class);\n            lstBlurbs = m1.blurbs;\n            system.debug('lstblurbs::::' + lstBlurbs);\n\n        }\n        delete deletecategory;\n        insert savecategory;\n        system.debug('categorymap########' + categorymap1);\n\n\n        return null;\n    }\n\n\n    public PageReference listAllBlurbs(){\n        List < SOCXO_token__c > currenttoken1 = [select Access_Token__c, expireson__c, tenanentendpoint__c from SOCXO_token__c where SOCXO_Service__r.SFuser__r.Id = : userinfo.getuserid()];\n        socxoApiHandler util = new socxoApiHandler();\n        body2 = util.getAllBlurbs(currenttoken1[0].id);\n        response1 m1 = (response1) JSON.deserialize(body2,response1.class);\n        lstBlurbs = m1.blurbs;\n        return null;\n    }\n\n    public List < SelectOption > getItems() {\n        List < SelectOption > options = new List < SelectOption > ();\n\n        for (string s: categorymap1.keyset()) {\n            options.add(new SelectOption(s, categorymap1.get(s)));\n\n        }\n        return options;\n    }\n\n\n    //test method to  check whether the selected category is picked up\n    //Adding some logic to call the enpoint to get the blurbs associated with a particular category.\n\n\n    //method for Sending email to the Lead\n    public PageReference sendmail() {\n        system.debug('cattttt' + categorylist);\n        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();\n        mail.settemplateid('00XC0000001KttT');\n        mail.setSaveAsActivity(true);\n        mail.settargetobjectid(lead1.id);\n        Messaging.sendEmail(new Messaging.SingleEmailMessage[] {\n            mail\n        });\n        return null;\n    }\n\n    //dummy method to use in the paneltest page\n\n    public PageReference test1() {\n        categorylist1.clear();\n        String strX = ApexPages.currentPage().getParameters().get('x1');\n        system.debug('[[[[[[[' + strX);\n        system.debug(']]]]]]]' + x1);\n        List < SOCXO_token__c > currenttoken1 = [select Id, Access_Token__c, expireson__c, tenanentendpoint__c from SOCXO_token__c where SOCXO_Service__r.SFuser__r.Id = : userinfo.getuserid()];\n\n        //calling the utility class to make callout\n        socxoApiHandler util = new socxoApiHandler();\n        body2 = util.getmerelatedblurbs(currenttoken1[0].id, x1);\n\n        system.debug('Blurb Response::::' + body2);\n\n\n        //Using wrapper class\n        map < string, Id > allcategories = new map < string, Id > ();\n        for (category__c cat: [select id, categoryid__c from category__c]) {\n            allcategories.put(cat.categoryid__c, cat.id);\n        }\n\n        list < URL__c > saveurl = new list < URL__c > ();\n        list < mailer__c > mailerobj = new list < mailer__c > ();\n        response1 m1 = (response1) JSON.deserialize(body2, response1.class);\n        lstBlurbs = m1.blurbs;\n        for (wrapper1 w: m1.blurbs) {\n\n            if (showselectedblurb = true && w.BlurbID == bluridtoshow) {\n                blurbtopopup = new wrapper1();\n                blurbtopopup = w;\n            }\n\n\n\n            /*url__c u = new url__c();\n      u.category__c = allcategories.get(w.CategoryId);\n      u.BlurbId__c = w.BlurbId;\n      u.Description__c = w.Description;\n      u.EnterpriseBlurbId__c = w.EnterpriseBlurbId;\n      u.links__c = w.Url;\n      u.ImageUrl__c = w.ImageUrl;\n      u.Title__c = w.Title;*/\n\n            // blurbBody.categoryId = allcategories.get(w.CategoryId);\n            /*blurbBody.BlurbId = w.BlurbId;\n      blurbBody.Description = w.Description;\n      blurbBody.EnterpriseBlurbId = w.EnterpriseBlurbId;\n      blurbBody.Url = w.Url;\n      blurbBody.ImageUrl = w.ImageUrl;\n      blurbBody.Title = w.Title;*/\n\n            // lstBlurbs.add(blurbBody);\n\n            // saveurl.add(u);\n            // categorylist1.add(u);\n\n\n\n\n            // system.debug('imageurlsssss##'+u.ImageUrl__c);\n\n            //categorylist.add(u);\n            mailer__c m = new mailer__c();\n            m.link__c = w.url;\n            mailerobj.add(m);\n        }\n        /* selcategory = [select id from category__c  where categoryId__c = : categories[0]];\n     delete selcategory.URLs__r;\n     insert saveurl;\n     list<mailer__c>formail = [select id from mailer__c];\n     delete formail;\n     insert mailerobj; */\n        system.debug('%%%%%%%%%%' + categorylist1);\n        system.debug('%%%%%%%%%%' + categorylist);\n\n\n        return null;\n    }\n\n\n\n\n    //method to post in facebook.\n\n    //@RemoteAction\n    public pagereference postinfb() {\n\n        system.debug('++++++++' + xfb1);\n        system.debug('++++++++' + xfb2);\n\n\n        system.debug('lstblurbs:::' + lstBlurbs);\n        for (wrapper1 m: lstBlurbs) {\n            if (m.BlurbId == xfb1) {\n                system.debug('blurbDetail:::' + m);\n                blurbDetailId = m.UserBlurbId;\n                blurbTitle = m.fbtittle;\n                blurbDesc = m.fbdecription;\n                blurbComment = m.fbcomment;\n            }\n        }\n\n        socxoApiHandler util = new socxoApiHandler();\n        facebookbody = util.facebookpost(blurbDetailId, blurbTitle, blurbDesc, blurbComment);\n        system.debug('fffffffff' + facebookbody);\n\n\n        //Parse down the response from facebook to check whether the user is connected to fb or not\n        JSONParser parser1 = JSON.createParser(facebookbody);\n        while (parser1.nextToken() != null) {\n            if ((parser1.getCurrentToken() == JSONToken.FIELD_NAME) && (parser1.getText() == 'Status')) {\n                parser1.nextToken();\n                fbstatus = parser1.getText();\n            }\n\n            if ((parser1.getCurrentToken() == JSONToken.FIELD_NAME) && (parser1.getText() == 'Message')) {\n                parser1.nextToken();\n                fbmessage = parser1.getText();\n            }\n\n\n        }\n\n        system.debug('fbmessage:::' + fbmessage);\n        system.debug('fbstatus:::' + fbstatus);\n\n        string callbackUrl = EncodingUtil.urlEncode('https://' + ApexPages.currentPage().getHeaders().get('Host') + Page.paneltest.getUrl(), 'UTF-8');\n\n\n        if (fbstatus == '1006') {\n            //string token1 = auth.AuthToken.getaccesstoken('0SOC0000000PAsc','facebook');\n            //system.debug('TTTTTTTTTTTTT'+token1);\n\n            showpopup();\n\n            /*String url = 'https://www.facebook.com/dialog/oauth?';\n        url += '&client_id=755760694472509';\n        url += '&scope=' + EncodingUtil.urlEncode('email public_profile', 'UTF-8');\n        //url += '&scope=' + EncodingUtil.urlEncode('full', 'UTF-8');\n        url +='&redirect_uri='+ callbackUrl;\n        //util.getmecode(url);\n        return new pagereference('https://login.salesforce.com/services/auth/oauth/00DC00000017HRhMAM/testappfb');*/\n\n\n            //PageReference pageRef = new PageReference(url);\n            //pageref.setredirect(true); \n        } else {\n            closepopup();\n            showPopup1();\n        }\n\n        system.debug('code:::' + code);\n\n        return null;\n\n\n    }\n\n\n    //method to post in twitter\n\n    public PageReference postintwitter() {\n\n        for (wrapper1 m: lstBlurbs) {\n            if (m.BlurbId == xfb1) {\n                system.debug('blurbDetail:::' + m);\n                blurbDetailId = m.UserBlurbId;\n                blurbTitle = m.tweeterpost;\n\n            }\n        }\n\n        socxoApiHandler util = new socxoApiHandler();\n        twitterbody = util.twitterpost(blurbDetailId, blurbTitle);\n\n        System.debug('twitterbody' + twitterbody);\n\n        JSONParser parser1 = JSON.createParser(twitterbody);\n        while (parser1.nextToken() != NULL) {\n            if ((parser1.getCurrentToken() == JSONToken.FIELD_NAME) && parser1.getText() == 'Status') {\n                parser1.nextToken();\n                twitterstatus = parser1.getText();\n            }\n\n            if ((parser1.getCurrentToken() == JSONToken.FIELD_NAME) && parser1.getText() == 'Message') {\n                parser1.nextToken();\n                twittermessage = parser1.getText();\n            }\n        }\n\n        System.debug('twitterstatus:' + twitterstatus);\n        System.debug('twittermessage:' + twittermessage);\n\n        string callbackUrl = EncodingUtil.urlEncode('https://' + ApexPages.currentPage().getHeaders().get('Host') + Page.paneltest.getUrl(), 'UTF-8');\n\n\n        if (twitterstatus == '1006') {\n            showpopup();\n        } else {\n            closepopup();\n            showPopup1();\n        }\n\n        system.debug('code:::' + code);\n\n        return null;\n\n\n    }\n\n\n    //Pop  up methods\n\n    public PageReference postinLinkedin() {\n        for (wrapper1 m: lstBlurbs) {\n            if (m.BlurbId == xfb1) {\n                system.debug('blurbDetail:::' + m);\n                blurbDetailId = m.UserBlurbId;\n                blurbTitle = m.lnktittle;\n                blurbDesc = m.lnkdecription;\n                blurbComment = m.lnkcomment;\n\n            }\n        }\n        socxoApiHandler util = new socxoApiHandler();\n        linkedinbody = util.linkedinPost(blurbDetailId, blurbTitle, blurbDesc, blurbComment);\n\n        System.debug('linkedinbody' + linkedinbody);\n\n        JSONParser parser1 = JSON.createParser(linkedinbody);\n        while (parser1.nextToken() != NULL) {\n            if ((parser1.getCurrentToken() == JSONToken.FIELD_NAME) && parser1.getText() == 'Status') {\n                parser1.nextToken();\n                linkedinStatus = parser1.getText();\n\n            }\n\n            if ((parser1.getCurrentToken() == JSONToken.FIELD_NAME) && parser1.getText() == 'Message') {\n                parser1.nextToken();\n                linkedinMessage = parser1.getText();\n            }\n        }\n\n        System.debug('linkedinStatus::' + linkedinStatus);\n        System.debug('linkedinMessage::' + linkedinMessage);\n\n        if (linkedinStatus == '1006') {\n            showpopup();\n        } else {\n            closepopup();\n            showPopup1();\n        }\n\n        return NULL;\n\n    }\n    \n     public PageReference scheduletest() {\n     \n     system.debug('lstBlurbs'+lstBlurbs);\n     system.debug('xfb1'+xfb1);\n     system.debug('xfb3'+xfb3);\n      for (wrapper1 m: lstBlurbs) {\n            if (m.BlurbId == xfb1) {\n               \n                if(xfb3 == 'facebook') {\n                blurbDetailId = m.UserBlurbId;\n                blurbTitle = m.fbtittle;\n                blurbDesc = m.fbdecription;\n                blurbComment = m.fbcomment;\n                }\n\n                if(xfb3 == 'twitter') {\n                blurbDetailId = m.UserBlurbId;\n                blurbTitle = m.tweeterpost;\n                blurbDesc = null;\n                blurbComment = null;\n                }\n\n                if(xfb3 == 'linkedin') {\n                blurbDetailId = m.UserBlurbId;\n                blurbTitle = m.lnktittle;\n                blurbDesc = m.lnkdecription;\n                blurbComment = m.lnkcomment;\n                }\n            }\n        }\n        system.debug('blurbDetail1:::' + blurbDetailId); \n        system.debug('blurbDetail2:::' + blurbTitle);\n        system.debug('blurbDetail3:::' + blurbComment);\n        socxoApiHandler util = new socxoApiHandler();\n        schedulebody = util.SchedulePost(blurbDetailId,blurbTitle,blurbDesc,blurbComment,xfb3);\n        \n        system.debug('schedulebodyyy'+schedulebody);\n        \n         JSONParser parser1 = JSON.createParser(schedulebody);\n        while (parser1.nextToken() != NULL) {\n            if ((parser1.getCurrentToken() == JSONToken.FIELD_NAME) && parser1.getText() == 'Status') {\n                parser1.nextToken();\n                ScheduleStatus = parser1.getText();\n\n            }\n\n            if ((parser1.getCurrentToken() == JSONToken.FIELD_NAME) && parser1.getText() == 'Message') {\n                parser1.nextToken();\n                ScheduleMessage = parser1.getText();\n            }\n            \n             if ((parser1.getCurrentToken() == JSONToken.FIELD_NAME) && parser1.getText() == 'time') {\n                parser1.nextToken();\n                ScheduleTime = parser1.getText();\n            }\n            \n        }\n        \n        system.debug('TTTTTTTTT'+ScheduleTime); \n        system.debug('MMMMMMMMM'+ScheduleMessage); \n        system.debug('SSSSSSSSS'+ScheduleStatus); \n        \n        if (ScheduleStatus == '1006') {\n         showpopup();\n        } else {\n            closepopup();\n            showPopup1();\n        }\n        \n         return null;\n     }\n     \n     \n\n    public void closePopup() {\n        displayPopup = false;\n\n    }\n\n    public void showPopup() {\n        displayPopup = true;\n    }\n\n    public void showPopup1() {\n        displayPopup1 = true;\n    }\n\n    public void closePopup1() {\n        displayPopup1 = false;\n\n    }\n\n\n\n    public pagereference fbconnect() {\n\n\n        string callbackUrl = EncodingUtil.urlEncode('https://' + ApexPages.currentPage().getHeaders().get('Host') + Page.paneltest.getUrl(), 'UTF-8');\n        String url = 'https://www.facebook.com/dialog/oauth?';\n        url += '&client_id=755760694472509';\n        url += '&scope=' + EncodingUtil.urlEncode('email public_profile', 'UTF-8');\n        url += '&redirect_uri=' + callbackUrl;\n        url += '&state=facebook';\n        return new pagereference(url);\n    }\n\n    public void postinChatter() {\n\n        //List <url_c> blurbInfo = [SELECT ]\n\n        system.debug('Blurb details::' + blurbLink + 'Title++' + blurbTitle);\n        FeedItem post = new FeedItem();\n        post.ParentId = userinfo.getUserId();\n        post.Body = 'Go to this Blurb:' + 'https://c.ap2.visual.force.com/apex/paneltest002?BlurbId=' + xfb1 + '&CategoryId=' + xfb2;\n        system.debug('xfb1::' + xfb1);\n        post.LinkUrl = blurbLink;\n        post.Title = blurbTitle;\n        insert post;\n\n    }\n\n\n    /*public pagereference twitterconnect() {\n\n     }\n     */\n\n    //wrapper classes for deserialisation.\n    public class wrapper {\n\n        public string CategoryId {\n            get;\n            set;\n        }\n        public string Name {\n            get;\n            set;\n        }\n\n    }\n    public class response {\n\n        public List < wrapper > Categories {\n            get;\n            set;\n        }\n        public string Status {\n            get;\n            set;\n        }\n        public string Message {\n            get;\n            set;\n        }\n    }\n\n    public class response1 {\n\n        public List < wrapper1 > blurbs {\n            get;\n            set;\n        }\n        public string Status {\n            get;\n            set;\n        }\n        public string Message {\n            get;\n            set;\n        }\n    }\n\n    public class wrapper1 {\n\n        public string BlurbId {\n            get;\n            set;\n        }\n        public string UserBlurbId {\n            get;\n            set;\n        }\n        public string EnterpriseBlurbId {\n            get;\n            set;\n        }\n        public string Title {\n            get;\n            set;\n        }\n        public string Description {\n            get;\n            set;\n        }\n        public string ImageUrl {\n            get;\n            set;\n        }\n        public string Url {\n            get;\n            set;\n        }\n        public string comment {\n            get;\n            set;\n        }\n        public string FeedName {\n            get;\n            set;\n        }\n        public string CategoryId {\n            get;\n            set;\n        }\n        public boolean Editmode {\n            get;\n            set;\n        }\n        public string fbtittle {\n            get;\n            set;\n        }\n        public string fbcomment {\n            get;\n            set;\n        }\n        public string fbdecription {\n            get;\n            set;\n        }\n        public string tweeterpost {\n            get;\n            set;\n        }\n        public string lnktittle {\n            get;\n            set;\n        }\n        public string lnkcomment {\n            get;\n            set;\n        }\n        public string lnkdecription {\n            get;\n            set;\n        }\n\n    }\n\n    //fb response while trying to post a blurb in fb.\n\n    /*public class blurbBody {\n      public Id category {get; set;}\n      public String description {get; set;}\n      public String blurbid {get; set;}\n      public String EnterpriseBlurbId {get; set;}\n      public String ImageUrl {get;set;}\n      public String Title {get; set;}\n\n     }\n      */\n\n\n\n\n}",
			"file": "src/classes/BlurbController.cls",
			"file_size": 28008,
			"file_write_time": 130803235240194472,
			"settings":
			{
				"buffer_size": 27967,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: Install Package",
				"Package Control: Install Package"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/Projects/Sublime/Latest SoCXO Code/src"
	],
	"file_history":
	[
		"/E/Projects/Sublime/Latest SoCXO Code/src/classes/socxoApiHandler.cls",
		"/E/Projects/Sublime/SoCXO/src/pages/SOCXOmainPage.page",
		"/E/Projects/Sublime/DeveloperSoCXO/src/pages/SOCXOmainPage.page",
		"/E/Projects/RealD/New Code/apex class.java",
		"/E/Projects/RealD/New Code/vf page.html",
		"/E/Projects/RealD/New Code/ShipmentCompletionControllerTest1.java",
		"/E/Projects/RealD/Code Backup/Apex.java",
		"/C/Users/amohandasan/Desktop/reald backup code/reald backup code/controllerclass.java",
		"/E/Projects/RealD/Code Backup/VF.html",
		"/E/Projects/Sublime/TestenvSoCXO/src/classes/AuthControllerforproduct.cls",
		"/E/Projects/RealD/Code/ShipmentSearchController_test",
		"/E/Projects/RealD/Code/ShipmentSearchpage_test",
		"/E/Projects/RealD/Code/CallResultSettings.java",
		"/E/Projects/RealD/Code/ShipmentSearchpage_first_edit.html",
		"/E/Projects/RealD/Code/DatatableSortControllerpage_mathew.html",
		"/E/Projects/RealD/Code/DatatableSortController_mathew.java",
		"/E/Projects/RealD/Code/ShipmentSearchController_first_edit.java",
		"/E/Projects/RealD/Code/ShipmentSearchPage.html",
		"/E/Projects/RealD/Code/ShipmentSearchController.java",
		"/E/Code/Pagination/Salesforce-Pagination/Pagination Page.html",
		"/E/Projects/SoCXO/SoCXO Chatter Post/paneltest",
		"/C/Users/amohandasan/Desktop/Responsive Table.html",
		"/C/Users/amohandasan/Desktop/overlay.html",
		"/C/Users/amohandasan/Desktop/Data-Loader-28.0-conf-SQL-Server-2012-Express/conf/database-conf.xml",
		"/C/Users/amohandasan/Desktop/Data-Loader-28.0-conf-SQL-Server-2012-Express/conf/process-conf.xml",
		"/C/Program Files (x86)/salesforce.com/Data Loader/samples/conf/database-conf.xml",
		"/E/Projects/Sublime/TestenvSoCXO/src/classes/socxouserRegistration.cls",
		"/E/Projects/Sublime/TestenvSoCXO/src/pages/linkedinPage.page",
		"/E/Projects/Sublime/TestenvSoCXO/src/classes/utilityclass.cls",
		"/E/Salesforce Softwares/salesforce_ant_33.0/sample/build.xml",
		"/E/Salesforce Softwares/salesforce_ant_33.0/sample/build1.xml",
		"/E/Salesforce Softwares/salesforce_ant_33.0/sample/build.properties",
		"/E/Salesforce Softwares/salesforce_ant_33.0/sample/unpackaged/package.xml",
		"/E/Projects/Sublime/SoCXO/src/pages/paneltest.page",
		"/E/Projects/Sublime/Latest SoCXO Code/src/pages/paneltest.page",
		"/E/Projects/Sublime/SalesforceSocxo/src/pages/paneltest.page",
		"/E/Projects/Sublime/SoCXO/src/classes/AuthControllerforproductrefined.cls",
		"/E/Projects/Sublime/SoCXO/src/classes/AuthControllerforproduct.cls-meta.xml",
		"/C/Users/amohandasan/Desktop/Socxo main/Private.html",
		"/E/Projects/SoCXO/similar socxo original/orig page.html",
		"/C/Users/amohandasan/Desktop/bootstrapCss.css",
		"/E/Projects/SoCXO/similar socxo original/authcode",
		"/E/Projects/SoCXO/similar socxo original/paneltest.html",
		"/C/Users/amohandasan/Desktop/panel-form-register1/panel-form-register/index.html",
		"/E/Projects/Sublime/TestenvSoCXO/src/pages/SOCXOmainPage.page",
		"/C/Users/amohandasan/Desktop/ShipmentLineItemTrigger.tgr",
		"/C/Users/amohandasan/Downloads/socxoapiPublished.raml",
		"/E/Projects/SoCXO/SoCXO Chatter Post/paneltest original.html",
		"/E/Projects/SoCXO/New folder/utilityclass.java",
		"/C/Users/amohandasan/Desktop/pixeladmin.js",
		"/C/Users/amohandasan/Desktop/SoCXOWeb.js",
		"/C/Users/amohandasan/Desktop/Socxo main/Private_files/css",
		"/C/Users/amohandasan/Desktop/Socxo main/Private_files/pixeladmin",
		"/C/Users/amohandasan/Desktop/Socxo main/Private_files/SoCXOWeb",
		"/C/Users/amohandasan/Desktop/_Blurb.cshtml",
		"/C/Users/amohandasan/Desktop/New folder (2)/Private.html",
		"/E/Projects/SoCXO/similar socxo original/orig page",
		"/C/Users/amohandasan/Desktop/socxostyle02.css",
		"/C/Users/amohandasan/Downloads/Appendix A1 Entry Validation 01 Simple.sql",
		"/E/Projects/SoCXO/SoCXO Developer Code/facebookconnector",
		"/E/Projects/SoCXO/SoCXO Developer Code/AuthControllerforproductrefined.cls",
		"/E/Projects/Sublime/SoCXO/src/classes/TopOpportunityController.cls-meta.xml",
		"/E/Projects/Sublime/SoCXO/src/classes/linkedinUtility.cls",
		"/C/Users/amohandasan/AppData/Roaming/Sublime Text 3/Packages/User/mavensmate.sublime-settings",
		"/E/Desktop/SF/jQuery-Table-Sort-Filter-Salesforce-master/jQuery-Table-Sort-Filter-Salesforce-master/qPeopleListExtension.cls",
		"/C/Users/amohandasan/Desktop/finalppt/example/index.htm",
		"/C/Users/amohandasan/Desktop/finalppt/example/pres.css",
		"/C/Users/amohandasan/Desktop/finalppt/example/pres.js",
		"/C/Users/amohandasan/Desktop/ppt11.txt",
		"/C/Users/amohandasan/Desktop/Quiz/Quiz/index.php",
		"/C/Users/amohandasan/Desktop/htmlpresent-master/htmlpresent-master/pres.js",
		"/C/Users/amohandasan/Desktop/htmlpresent-master/htmlpresent-master/pres.css",
		"/C/Users/amohandasan/Desktop/htmlpresent-master/htmlpresent-master/index.htm",
		"/C/Users/amohandasan/Desktop/Dreamflash2014New/Dreamflash2014New/dreamflash.html",
		"/C/Users/amohandasan/Desktop/style.css",
		"/C/Users/amohandasan/Desktop/Contact Account.java",
		"/E/Desktop/SF/jQuery-Table-Sort-Filter-Salesforce-master/jQuery-Table-Sort-Filter-Salesforce-master/qPeopleList.vf",
		"/E/Code/Pagination/Salesforce-Pagination/Pagination Class.java",
		"/E/Desktop/SF/sfdc-oauth-playground-master/sfdc-oauth-playground-master/OAuth/src/classes/OAuth.cls",
		"/D/SoCXO/New folder/SOCXOclass.java",
		"/D/SoCXO/New folder/SOCXOmainPage.html",
		"/C/Users/amohandasan/Desktop/popup.html",
		"/C/Users/amohandasan/Desktop/sfdc-oauth-playground-master/sfdc-oauth-playground-master/OAuth/src/classes/AuthController.cls",
		"/C/Users/amohandasan/Desktop/TwitterApi.cs",
		"/C/Users/amohandasan/Desktop/jQuery-Table-Sort-Filter-Salesforce-master/jQuery-Table-Sort-Filter-Salesforce-master/qPeopleList.vf",
		"/C/Users/amohandasan/Desktop/jQuery-Table-Sort-Filter-Salesforce-master/jQuery-Table-Sort-Filter-Salesforce-master/qPeopleListExtension.cls",
		"/C/Users/amohandasan/Desktop/Suyati/SalesITV/PurchaseCX.java",
		"/C/Users/amohandasan/Desktop/Suyati/SalesITV/purchase.html",
		"/C/Users/amohandasan/Desktop/hello.html",
		"/C/Users/amohandasan/Desktop/popup.js",
		"/C/Users/amohandasan/Desktop/1111.html",
		"/C/Users/amohandasan/Downloads/lightning-tutorial/style.css"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\"",
			"post",
			"lstBlurbs",
			"\"",
			"scheduletest",
			"SchedulePost",
			"xfb3",
			"SchedulePost",
			"SchedulePopuplinkedIn",
			"SchedulePost",
			"body2",
			"container",
			"allcategories",
			"getall",
			"getItems",
			"categorymap",
			"getmerelatedblurbs",
			"strX",
			"test1",
			"test",
			"savecategory",
			"allcategories",
			"bluridtoshow",
			"allcategories",
			"currenttoken1",
			"categorylist1",
			"categorymap",
			"accsToken",
			"loginError",
			"showmsg",
			"equalTo",
			"required",
			"equalTo",
			"req2",
			"req1",
			"statusofblurb",
			"scheduletest",
			"SchedulePopupFacebook",
			"lstBlurbs",
			"blurbString",
			"instantShareOff",
			"Instantsharecheck",
			"xfb1",
			"test",
			"\"",
			"AuthControllerforproductrefined",
			"paneltest002",
			"SOCXOmainPage",
			"SOCXOclass",
			"deletecategory",
			"userbody",
			"username",
			"jsonDataAllLineItems",
			"shipmentLineItemMap",
			"jsonDataMinimal",
			"jsonDataAllLineItems",
			"startse",
			"jsonDataMinimal",
			"facebookpost",
			"tokens",
			"resource",
			"http://testenv.socxo.com/api/2.0/user/profile",
			"categories",
			"Test.setMock",
			"state",
			"debug",
			"shipmentsTable",
			"selectedWarehouseId",
			"ShipmentSearchController",
			"jsonDataAllLineItems",
			"debug",
			"allShipments",
			"alert",
			"shipmentsTable",
			"buildShipmentsTable",
			"shipmentstable",
			"message",
			"selectCheckbox",
			"reset",
			"clear",
			"checkCount",
			"selectAllCheckbox",
			"rangeFromDate",
			"startSearch",
			"shipDate",
			"idFromDate",
			"errorMsg",
			"rangeFrom",
			"selectedWarehouseId",
			"rangeFromDate",
			"rangeFrom",
			"customerNumber",
			"customerNum",
			"customerNumber",
			"rangeFromDate",
			"rangeFrom",
			"dFrom",
			"allLineItems",
			"rangeFromDate",
			"shipmentLineItemMap",
			"selectedWarehouseId",
			"warehouseIds",
			"selectedWarehouseId",
			"jsonDataMinimal",
			"getShipmentTypes",
			"selectall",
			"10",
			"showing",
			"allShipments",
			"allShipmentsTables",
			"Search:",
			"jsonDataMinimal",
			"buildAccountsTable",
			"rowIdentifier",
			"selectall",
			"warehouseIds",
			"selectedWarehouseId",
			"/token",
			"getmet",
			"twittertok",
			"sf.password",
			"sf.username",
			"status",
			"posting..",
			"postin",
			"status1",
			"status",
			"action"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"\\\"",
			"BlurbController",
			"BlurbControllerPage",
			"socxoLoginPage",
			"socxoLoginController",
			"ShipmentCompletion",
			"tblShipments",
			"referenceNumber",
			"sfdeveloper123",
			"aditya-developer@salesforce.com",
			"answer1",
			"j$",
			"verifier_token",
			"td",
			"<td>",
			"quotingProcess",
			"opportunityRef"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/classes/socxoApiHandler.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24727,
						"regions":
						{
						},
						"selection":
						[
							[
								45,
								45
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/classes/BlurbController.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27967,
						"regions":
						{
						},
						"selection":
						[
							[
								44,
								44
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.MavensMate-OutputPanel":
	{
		"height": 118.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 118.0
	},
	"pinned_build_system": "",
	"project": "Latest SoCXO Code.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 257.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
